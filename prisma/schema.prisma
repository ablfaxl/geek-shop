generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String?
  username      String
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  products      Product[] // User's products
}

// NextAuth required models
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("userId")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int      @map("userId")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Add this enum above your models
enum ProductStatus {
  DRAFT
  ACTIVE
  OUT_OF_STOCK
  LOW_STOCK
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  status      ProductStatus @default(DRAFT)
  category    String
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      Int? // Foreign key
  user        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
