// ---------- Generators & datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum ProductStatus {
  DRAFT
  ACTIVE
  OUT_OF_STOCK
  LOW_STOCK
}

// ---------- Core models ----------
model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String?
  username      String
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  products      Product[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id       Int        @id @default(autoincrement())
  title    String
  parentId Int?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryHierarchy")
  products Product[]
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  price       Decimal       @db.Decimal(10, 2) // precise monetary value
  stock       Int
  status      ProductStatus @default(DRAFT)
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // relations
  userId      Int?
  categoryId  Int?
  user        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([categoryId])
}
